from manim import *
from manim_fonts import *
class Pres(Scene):
    def construct(self):
            origin = Tex('[0,0]').scale(0.7).next_to([0,0,0], LEFT)
            self.play(FadeIn(origin),run_time=1)
            body1 = Dot([2,2,0])
            body1_label = Text('m1').scale(0.4).next_to(body1, UP, buff=0.1)
            self.play(FadeIn(body1),FadeIn(body1_label), run_time=2)
            body2 = Dot([3,-1,0])
            body2_label = Text('m2').scale(0.4).next_to(body2, DOWN, buff=0.1)
            self.play(FadeIn(body2),FadeIn(body2_label), run_time=2)
            r1 = Arrow(start=[0,0,0], end=[1.9,2,0], buff=0, stroke_width=4, tip_length=0.2)
            r1_label = Text('r1').scale(0.4).next_to(r1, UP, buff=0)
            self.play(GrowArrow(r1), FadeIn(r1_label), run_time=1.5, rate_func=rate_functions.linear)
            r2 = Arrow(start=[0,0,0], end=[2.9,-1,0], buff=0, stroke_width=4,tip_length=0.2)
            r2_label = Text('r2').scale(0.4).next_to(r2, DOWN, buff=0)
            self.play(GrowArrow(r2), FadeIn(r2_label), run_time=1.5, rate_func=rate_functions.linear)
            r = DoubleArrow(start=[2,2,0], end=[3,-1,0], stroke_width=4, tip_length=0.2, buff=0.1).scale(0.1)
            r_label = Text('r').scale(0.4).next_to(r, RIGHT, buff=0)
            self.play(r.animate.scale(10), FadeIn(r_label), run_time=1.5, rate_func=rate_functions.linear)
            cm = Arrow(start=[0,0,0], end=[2.3,1,0], buff=0, stroke_width=4, tip_length=0.2)
            cm_label = Text('R').scale(0.4).next_to(cm, DOWN, buff=0)
            cm_point_label = Text('CM').scale(0.4).next_to([2.4,1,0], RIGHT, buff=0)
            self.play(GrowArrow(cm), FadeIn(cm_label), FadeIn(cm_point_label), run_time=1.5, rate_func=rate_functions.linear)
            two_body_diagram = VGroup(origin,body1,body1_label,body2,body2_label,r1,r1_label,r2,r2_label,r,r_label,cm,cm_label,cm_point_label)
            self.play(two_body_diagram.animate.move_to(UP*2+LEFT*5).scale(0.5), run_time=3)
            lagrangian = Tex(r"$L=\frac{1}{2}m_{1}\lvert\dot{r_{1}}\rvert^2+\frac{1}{2}m_{2}\lvert\dot{r_{2}}\rvert^2 - U(r)$", font_size=55).move_to(UP*2+RIGHT)
            self.play(GrowFromPoint(lagrangian, ORIGIN))
            self.wait(2)
            self.play(FadeOut(Text("(OR) in terms of reduced mass & plane polar coordinates",color=YELLOW).scale(0.5).move_to(UP+RIGHT)), run_time=7)
            reduced_mass = Tex(r"$\mu=\frac{m_{1}m_{2}}{m_{1}+m_{2}}$", font_size=55).move_to(RIGHT*5)
            lagrangian_in_polar = Tex(r"$L=\frac{1}{2}\mu(\dot{r}^2+r^2\dot{\theta}^2)-U(r)$", font_size=55).move_to(LEFT*2)
            self.play(ReplacementTransform(lagrangian,lagrangian_in_polar),FadeIn(reduced_mass),run_time=1.5)
            self.wait(3)
            self.play(FadeOut(Text("Plugging in the lagrangian into the Euler Lagrange Equations , we observe",color=YELLOW).scale(0.5).move_to(DOWN*2)), run_time=7)
            self.wait(2)
            momentum = Tex(r"$l=\mu{r}^2\dot{\theta}$", font_size=55)
            self.play(FadeOut(Text("The lagrangian is cyclic in theta , the angular momentum conjugate to the coordinate theta is conserved , hence",color=YELLOW).scale(0.4).move_to(DOWN*2)), run_time=9)
            self.play(FadeIn(momentum.move_to(DOWN*2)))
            self.wait(3)
            self.play(FadeOut(Text("Using Kepler's Second law and simplifying , we arrive at ",color=YELLOW).scale(0.4).move_to(UP*2)), run_time=6)
            self.play(Uncreate(reduced_mass), Uncreate(lagrangian_in_polar),Uncreate(momentum))
            orbit_equation = Tex(r"$\frac{d^2u}{d\theta^2}+u=\frac{GM_{\odot}}{h^2}$", font_size=55)
            self.play(FadeIn(orbit_equation), run_time=1)
            self.play(Circumscribe(orbit_equation, Rectangle,stroke_width=2, run_time=2))
            self.play(Circumscribe(orbit_equation, Rectangle,stroke_width=2,run_time=2))
            self.play(Circumscribe(orbit_equation, Rectangle,stroke_width=2,run_time=2))
            self.play(orbit_equation.animate.move_to(UP*2))
            self.play(FadeOut(Text("This second order ode can be reduced to two first order odes",color=YELLOW).scale(0.4)), run_time=6)
            decoupled_eq1 = Tex(r"$\frac{du}{d\theta}=z$", font_size=55)
            decoupled_eq2 = Tex(r"$\frac{dz}{d\theta}=\frac{GM_{\odot}}{h^2}-u$", font_size=55).next_to(decoupled_eq1,DOWN*2)
            reduced_odes = VGroup(decoupled_eq1, decoupled_eq2)
            self.play(ReplacementTransform(orbit_equation, reduced_odes))
            self.play(reduced_odes.animate.move_to(UP*2))
            self.play(FadeOut(Text("Now we can numerically solve these first order odes using the Euler's method, i.e",color=YELLOW).scale(0.4)), run_time=6)
            u_eq = Tex(r"$u_{i+1}=u_{i}+d\theta\frac{du}{d\theta}_{i}$", font_size=55)
            dud0_eq = Tex(r"$\frac{du}{d\theta}_{i+1}=\frac{du}{d\theta}_{i}+d\theta\frac{GM_{\odot}}{h^2}-u_{i}$", font_size=55).next_to(u_eq, DOWN*2)
            self.play(FadeIn(u_eq), FadeIn(dud0_eq), run_time=3)
            self.play(Indicate(u_eq))
            self.play(Indicate(dud0_eq))
            self.wait(5)